#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LostShoppingServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SHOPPING")]
	public partial class CategoryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCATEGORY(CATEGORY instance);
    partial void UpdateCATEGORY(CATEGORY instance);
    partial void DeleteCATEGORY(CATEGORY instance);
    #endregion
		
		public CategoryDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SHOPPINGConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CategoryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CategoryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CategoryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CategoryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CATEGORY> CATEGORies
		{
			get
			{
				return this.GetTable<CATEGORY>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CATEGORY")]
	public partial class CATEGORY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CAT_ID;
		
		private string _CAT_NAME;
		
		private string _CAT_DES;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCAT_IDChanging(int value);
    partial void OnCAT_IDChanged();
    partial void OnCAT_NAMEChanging(string value);
    partial void OnCAT_NAMEChanged();
    partial void OnCAT_DESChanging(string value);
    partial void OnCAT_DESChanged();
    #endregion
		
		public CATEGORY()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CAT_ID
		{
			get
			{
				return this._CAT_ID;
			}
			set
			{
				if ((this._CAT_ID != value))
				{
					this.OnCAT_IDChanging(value);
					this.SendPropertyChanging();
					this._CAT_ID = value;
					this.SendPropertyChanged("CAT_ID");
					this.OnCAT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAT_NAME", DbType="NVarChar(50)")]
		public string CAT_NAME
		{
			get
			{
				return this._CAT_NAME;
			}
			set
			{
				if ((this._CAT_NAME != value))
				{
					this.OnCAT_NAMEChanging(value);
					this.SendPropertyChanging();
					this._CAT_NAME = value;
					this.SendPropertyChanged("CAT_NAME");
					this.OnCAT_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAT_DES", DbType="NVarChar(100)")]
		public string CAT_DES
		{
			get
			{
				return this._CAT_DES;
			}
			set
			{
				if ((this._CAT_DES != value))
				{
					this.OnCAT_DESChanging(value);
					this.SendPropertyChanging();
					this._CAT_DES = value;
					this.SendPropertyChanged("CAT_DES");
					this.OnCAT_DESChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
